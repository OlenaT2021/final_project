<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>MadCap Flare</title>
    </head>
    <body>
        <h2>MadCap Flare</h2>
        <p><b>MadCap Flare’s</b> strength lies in its single-sourcing capabilities, delivering consistent documentation across formats like HTML5, PDF, and Word, but this requires attention to format-specific aspects. Among them, there are three key areas:</p>
        <ul>
            <li>
                <p><a href="#Text">text externalization</a> (it simplifies updates and localization),</p>
            </li>
            <li>
                <p><a href="#Text2">text layout and formatting</a> (it adapts content layout and formatting to each output’s unique needs),</p>
            </li>
            <li>
                <p><a href="#Text2">code and Markup language</a> (it ensures proper rendering).</p>
            </li>
        </ul>
        <p>At the end of the chapter, <a href="#General">General format-specific tips</a> and <a href="#General2">General MadCap Flare best practices</a> are listed.</p>
        <h3><a name="Text"></a>Text externalization</h3>
        <p>Text externalization in MadCap Flare refers to separating content from its presentation or managing reusable text across multiple outputs or projects. This is particularly useful for single-sourcing, localization, and maintaining consistency.</p>
        <ul>
            <li>
                <p><b>Variables.</b> Use variables for text that appears repeatedly (for example, product names, version numbers). Define these in a variable file and apply them across topics. </p>
            </li>
        </ul>
        <div class="example-grey">
            <p><b>EXAMPLE</b> Updating a variable like <code>"ProductName"</code> in one place updates it everywhere, saving time and reducing errors. </p>
        </div>
        <p style="text-indent: 0.5in;">Consider output-specific variables if text differs between formats</p>
        <div class="example-grey">
            <p><b>EXAMPLE</b> "Click here" for HTML5 vs "See page X" for PDF).</p>
        </div>
        <ul>
            <li>
                <p><b>Snippets.</b> For larger reusable text blocks (for example, disclaimers, procedures), snippets allow externalized content to be inserted into multiple topics. Choose between <code>snippetText</code> (inline, no formatting preserved) and <code>snippetBlock</code> (preserves formatting) based on whether layout consistency matters across outputs. For instance, a code-heavy snippet might need <code>snippetBlock</code> to retain indentation in PDF and HTML5.</p>
            </li>
            <li>
                <p><b>Condition tags.</b> Externalize content by applying conditions to include or exclude text based on the target output. For example, tag a section as<b> "WebOnly"</b> for HTML5 or<b> "PrintOnly"</b> for PDF. This ensures format-specific text is externalized and managed efficiently without duplicating files.</p>
            </li>
            <li>
                <p><b>Localization.</b> For multilingual projects, externalize translatable text into resource files or integrate with MadCap Lingo. Ensure variables and snippets are designed with translation in mind (for example, avoid embedding context-specific phrases that don’t translate well).</p>
            </li>
        </ul>
        <h3><a name="Text2"></a>Text layout and formatting</h3>
        <p>Text layout and formatting in Flare involve styling content to suit different outputs while leveraging its single-sourcing strengths.</p>
        <ul>
            <li>
                <p><b>Stylesheets (CSS).</b> Use a single CSS file with medium-specific styles (for example, <b>"print"</b> for PDF, <b>"non-print"</b> for HTML5) to control layout and formatting. </p>
            </li>
        </ul>
        <div class="example-grey">
            <p><b>EXAMPLE</b> Set font-size in relative units (for example, <code>em</code> or %) for web outputs to ensure scalability, but use absolute units (for example, <code>pt</code>) for print to guarantee precision in PDFs.</p>
        </div>
        <ul>
            <li>
                <p><b>Responsive design.</b> Flare’s Layout resizer and media queries allow for previewing and adjusting text layout for different screen sizes (for example, tablet, mobile). Define breakpoints in the CSS to tweak text wrapping, margins, or font sizes for HTML5 outputs, while keeping PDF layouts static.</p>
            </li>
            <li>
                <p><b>Typography.</b> PDF outputs benefit from Flare’s enhanced typography options (for example, small font rendering). Adjust line spacing (line-height), letter spacing (letter-spacing), and font families in the stylesheet to optimize readability per format. For instance, a sans-serif font might suit HTML5, while a serif font enhances PDF legibility.</p>
            </li>
            <li>
                <p><b>Proxies and auto-generated content.</b> Format tables of contents (TOC), mini-TOCs, or indexes using proxy styles (for example, MadCap|TOCProxy). For print, remove default borders or adjust leader lines (for example, solid vs dotted) via CSS. For HTML5, ensure these elements collapse gracefully on smaller screens.</p>
            </li>
            <li>
                <p><b>Accessibility.</b> For PDF/UA compliance, enable tagging in the PDF target settings to structure text layout for screen readers. In HTML5, use semantic tags (for example, <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>) and ARIA attributes to enhance navigation, ensuring text layout supports assistive technologies.</p>
            </li>
        </ul>
        <h3>Code and Markup language</h3>
        <p>Handling code and markup in Flare requires attention to how it is authored, displayed, and rendered across outputs.</p>
        <ul>
            <li>
                <p><b>Code snippets.</b> Use Flare’s native <code>MadCap:codeSnippet</code> element (introduced in Flare 2020) to insert formatted code with syntax highlighting. Specify the language (for example, Python, JavaScript) for accurate highlighting, and customize via CSS (for example, <code>MadCap|codeSnippet</code> styles) for font, colours, or line numbering. In HTML5, a <b>"Copy"</b> button is auto-added; ensure it’s styled for usability. For PDF, verify the snippet renders cleanly without overflow.</p>
            </li>
            <li>
                <p><b>Preserving inline HTML.</b> Pasting raw HTML into Flare’s XML Editor can disrupt formatting due to its reformatting behaviour. To preserve it, paste into a <code>snippetBlock</code> or edit the topic in an external text editor, then import. For example, syntax-highlighted code from tools like Pygments should reference an external CSS file rather than inline styles, as Flare’s PDF engine may not handle the latter well.</p>
            </li>
            <li>
                <p><b>Markdown import.</b> Flare supports importing Markdown, mapping code blocks to <code>MadCap:codeSnippet</code>. Ensure the source Markdown uses proper triple-backtick syntax (<code>```</code>) with language identifiers for seamless conversion. Post-import, tweak styles if the default highlighting doesn’t match the output needs.</p>
            </li>
            <li>
                <p><b>Semantic Markup.</b> While Flare uses XHTML internally, it’s not natively a semantic markup tool like DITA. Simulate semantic structure with consistent class names (for example, <code>p.Note</code>, <code>p.Warning</code>) and apply them via the stylesheet. For DITA output, Flare converts some elements (for example, variables to <code>&lt;ph&gt;</code> tags), but test thoroughly as full semantic fidelity may require post-processing.</p>
            </li>
            <li>
                <p><b>Clean-up and validation.</b> Use Flare’s Markup Suggestions tool to identify and fix issues like empty tags or excessive spaces in the XHTML. For complex code, preview outputs (HTML5, PDF) to catch rendering quirks, as the XML Editor’s display may differ from the final result.</p>
            </li>
        </ul>
        <h3><a name="General"></a>General format-specific tips</h3>
        <ul>
            <li>
                <p><b>HTML5.</b> Prioritize responsive layouts, relative units, and interactive elements (for example, collapsible sections). Test across browsers and devices.</p>
            </li>
            <li>
                <p><b>PDF.</b> Focus on static layouts, precise measurements, and high-quality typography. Use page layouts and breaks (for example, page-break-before) to control flow.</p>
            </li>
            <li>
                <p><b>Cross-output consistency.</b> Define a base style in the default medium, then override only what’s necessary in format-specific mediums to minimize maintenance.</p>
            </li>
        </ul>
        <h3><a name="General2"></a>General MadCap Flare best practices</h3>
        <ul>
            <li>
                <p><b>Single sourcing.</b> Flare is built for single sourcing, allowing one content set to generate multiple outputs (for example, HTML5, PDF) using targets, condition tags, and variables. For example, a single topic can adapt to web or print with minimal rework.</p>
            </li>
            <li>
                <p><b>Validation.</b> Flare supports content validation through tools like <b>Project analysis</b> (checks for broken links, unused files) and the <b>XML editor’s</b> real-time markup validation. It ensures XHTML compliance, though external tools may be needed for deeper standards checks (for example, WCAG).</p>
            </li>
            <li>
                <p><b>Tooling.</b> Flare integrates built-in tools like the Layout resizer, Skin editor, and stylesheet editor, plus external integrations (for example, MadCap lingo for translation, Git for version control), enhancing workflow efficiency.</p>
            </li>
            <li>
                <p><b>Metadata management.</b> Flare handles metadata via topic properties (for example, title, keywords) and variables, which can be used for SEO in HTML5 or document info in PDFs. Advanced metadata (for example, Dublin Core) requires custom implementation in the XHTML.</p>
            </li>
            <li>
                <p><b>Modular design.</b> Flare supports modular content with topic-based authoring—small, reusable topics linked via TOCs or cross-references—and snippets for repeated blocks, ideal for scalable documentation.</p>
            </li>
            <li>
                <p><b>Conditional processing.</b> Condition tags are a native feature, enabling content filtering by output (for example, <b>"WebOnly"</b> for HTML5, <b>"PrintOnly"</b> for PDF). Apply them to text, snippets, or topics, then configure targets to include/exclude conditions.</p>
            </li>
            <li>
                <p><b>Version control.</b> Flare offers built-in source control integration (for example, Git, SVN) via the Source control menu, or Global project linking for managing shared content across projects, supporting collaborative versioning.</p>
            </li>
            <li>
                <p><b>Testing outputs.</b> Flare facilitates testing with <b>Build</b> &gt; <b>View Output</b> for previewing targets, the Layout resizer for responsive HTML5 checks, and analysis reports to catch errors, ensuring format-specific quality.</p>
            </li>
        </ul>
    </body>
</html>